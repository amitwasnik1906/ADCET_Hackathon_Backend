generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Replace with your PostgreSQL connection string
}

model User {
  id            String        @id @default(uuid())
  name          String
  email         String        @unique
  phone_number  String        @unique
  password_hash String
  refreshToken  String?       // Store refresh token here
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
}

model Bus {
  id             String        @id @default(uuid())
  bus_number     String        @unique
  capacity       Int
  routes         Route[]       // One-to-many relationship with Route
  current_latitude  Float?     // Latest latitude
  current_longitude Float?     // Latest longitude
  current_passenger_count Int? // Latest passenger count
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
}
model Route {
  id             String        @id @default(uuid())
  route_name     String
  start_location String
  end_location   String
  busId          String?       // Foreign key to Bus (optional)
  bus            Bus?          @relation(fields: [busId], references: [id]) // Defines the relationship
  stops          Json          // Stops stored as JSON : Array of stops: [{ name: String, latitude: Float, longitude: Float }]
  route_polyline String?       // Store the encoded polyline from Google Maps
  departure_time DateTime
  status         String        @default("inactive") // Can be "active" or "inactive"
  analytics      Analytics[]  
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
}

model Admin {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  password_hash String
  refreshToken  String?       // Store refresh token here
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
}

model Analytics {
  id                      String    @id @default(uuid())
  route_id                String
  route                   Route     @relation(fields: [route_id], references: [id])
  avg_passenger_count     Int       // Average passengers for the day
  max_passenger_count     Int       // Peak passenger count in a day
  crowd_percentage        Float     // (avg_passenger_count / capacity) * 100
  peak_hour               String    // Time with highest passenger count
  date_recorded           DateTime  // Store the date of entry (daily basis)
}

